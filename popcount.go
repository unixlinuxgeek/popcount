// Упражнение 2.4
// Напишите версию PopCount, которая подсчитывает биты с помощью сдвига аргумента по всем 64 позициям,
// проверяя при каждом сдвиге крайний справа бит. Сравните производительность этой версии с выборкой из таблицы.

package popcount

// pc[i] — количество еденичных битов в i.
var pc [256]byte

func init() {
	for i := range pc {
		pc[i] = pc[i/2] + byte(i&1)
	}
}

// PopCountNew возвращает степень заполнения (количество установленных битов) значения x.
func PopCountNew(x uint64) int {
	//var in = x
	var c = 0 // сдесь подсчитываем биты

	for x != 0 {
		if (x & 1) == 1 { // проверяем крайне справа бит
			c++
		}
		x = x >> 1 // выполняем правый побитовый сдвиг
	}
	//fmt.Printf("Десятичное число %d, количество установленных битов: %d (%b)\n", in, x, x)
	return c
}

// PopCountOld возвращает степень заполнения
// (количество установленных битов) значения x.
func PopCountOld(x uint64) int {
	return int(pc[byte(x>>(0*8))] +
		pc[byte(x>>(1*8))] +
		pc[byte(x>>(2*8))] +
		pc[byte(x>>(3*8))] +
		pc[byte(x>>(4*8))] +
		pc[byte(x>>(5*8))] +
		pc[byte(x>>(6*8))] +
		pc[byte(x>>(7*8))])
}
